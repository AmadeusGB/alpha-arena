'use client';

import React, { useEffect, useState, useRef } from 'react';
import { portfolioApi, decisionApi, portfolioApi as positionsApi } from '../../lib/api';
import { ModelPortfolio, Decision, Position } from '../../types';

// 格式化时间戳为本地时间
const formatTimestamp = (timestamp: string) => {
  try {
    // 解析时间戳（支持ISO格式和UTC时区）
    const date = new Date(timestamp);
    
    // 检查日期是否有效
    if (isNaN(date.getTime())) {
      console.warn('Invalid timestamp:', timestamp);
      return 'Invalid Date';
    }
    
    // 使用本地时区显示
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    
    return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;
  } catch (error) {
    console.error('Error formatting timestamp:', error);
    return 'Invalid Date';
  }
};

export default function ModelsPage() {
  const [portfolios, setPortfolios] = useState<ModelPortfolio[]>([]);
  const [selectedModel, setSelectedModel] = useState<string>('all');
  const [portfolioHistory, setPortfolioHistory] = useState<any[]>([]);
  const [decisions, setDecisions] = useState<Decision[]>([]);
  const [positions, setPositions] = useState<Position[]>([]);
  const [activeTab, setActiveTab] = useState<'history' | 'chat' | 'positions'>('history');
  const [loading, setLoading] = useState(true);
  const [modalOpen, setModalOpen] = useState(false);
  const [modalContent, setModalContent] = useState<Decision | null>(null);
  const [conversationModalOpen, setConversationModalOpen] = useState(false);
  const [conversationContent, setConversationContent] = useState<{prompt: string, response: string} | null>(null);
  const [timeRange, setTimeRange] = useState<'15m' | '1h' | '3h' | '6h' | '12h' | '1d'>('6h');
  const [allHistoryData, setAllHistoryData] = useState<any[]>([]);
  const [allDecisions, setAllDecisions] = useState<Decision[]>([]);
  const [allPositions, setAllPositions] = useState<Position[]>([]);
  const [autoRefresh, setAutoRefresh] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);

  useEffect(() => {
    loadData();
  }, []);

  // 自动刷新
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (autoRefresh) {
      interval = setInterval(() => {
        console.log('🔄 自动刷新数据...');
        handleRefresh();
      }, 30000); // 每30秒刷新一次
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [autoRefresh]);

  useEffect(() => {
    if (selectedModel === 'all') {
      loadAllModelsData();
    } else if (selectedModel) {
      loadModelDetails(selectedModel);
    }
  }, [selectedModel]);

  useEffect(() => {
    if (!allHistoryData || allHistoryData.length === 0) {
      return;
    }
    
    // 根据时间范围过滤数据
    const now = new Date().getTime();
    const rangeMs = {
      '15m': 15 * 60 * 1000,
      '1h': 60 * 60 * 1000,
      '3h': 3 * 60 * 60 * 1000,
      '6h': 6 * 60 * 60 * 1000,
      '12h': 12 * 60 * 60 * 1000,
      '1d': 24 * 60 * 60 * 1000,
    };

    const startTime = now - rangeMs[timeRange];
    const filtered = allHistoryData.filter((item: any) => {
      const itemTime = new Date(item.timestamp).getTime();
      return itemTime >= startTime;
    });

    console.log('时间过滤:', {
      timeRange,
      now: new Date(now).toISOString(),
      startTime: new Date(startTime).toISOString(),
      totalData: allHistoryData.length,
      filteredData: filtered.length,
      firstItem: allHistoryData[0],
      lastItem: allHistoryData[allHistoryData.length - 1]
    });

    setPortfolioHistory(filtered);
  }, [timeRange, allHistoryData]);

  const loadData = async () => {
    try {
      const portfoliosRes = await portfolioApi.getPortfolios();
      setPortfolios(portfoliosRes.data);
      
      // 加载所有模型的历史数据
      const historyRes = await portfolioApi.getAllPortfolioHistory(1000);
      const historyData = historyRes.data || {};
      
      // 转换为图表格式
      const chartData = [];
      const models = Object.keys(historyData);
      
      if (models.length > 0) {
        // 获取所有时间点
        const allTimestamps = new Set<string>();
        models.forEach(model => {
          historyData[model].forEach((item: any) => {
            allTimestamps.add(item.timestamp);
          });
        });
        
        const sortedTimestamps = Array.from(allTimestamps).sort();
        
        // 构建图表数据
        sortedTimestamps.forEach(timestamp => {
          const dataPoint: any = { timestamp };
          models.forEach(model => {
            const item = historyData[model].find((h: any) => h.timestamp === timestamp);
            dataPoint[model] = item ? item.total_value : null;
          });
          chartData.push(dataPoint);
        });
        
        // 按时间倒序（最新的在前）
        chartData.reverse();
        setAllHistoryData(chartData);
        setPortfolioHistory(chartData);
      }
      
      // 默认选择"全部"模式
      setSelectedModel('all');
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadAllModelsData = async () => {
    try {
      const allDecs: Decision[] = [];
      const allPos: Position[] = [];
      
      // 为每个模型加载数据
      for (const portfolio of portfolios) {
        try {
          // 加载决策历史
          const decisionsRes = await decisionApi.getDecisions(portfolio.model_name);
          const modelDecisions = decisionsRes.data?.items || decisionsRes.data || [];
          allDecs.push(...modelDecisions);
          
          // 加载持仓
          const positionsRes = await positionsApi.getPositions(portfolio.model_name);
          const modelPositions = positionsRes.data?.items || positionsRes.data || [];
          allPos.push(...modelPositions);
        } catch (error) {
          console.error(`Error loading data for ${portfolio.model_name}:`, error);
        }
      }
      
      // 按时间倒序排序
      allDecs.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
      
      setAllDecisions(allDecs);
      setAllPositions(allPos);
      setDecisions(allDecs);
      setPositions(allPos);
    } catch (error) {
      console.error('Error loading all models data:', error);
    }
  };

  const loadModelDetails = async (modelName: string) => {
    try {
      // 加载决策历史
      const decisionsRes = await decisionApi.getDecisions(modelName);
      // 后端返回的数据在 items 字段中
      setDecisions(decisionsRes.data?.items || decisionsRes.data || []);
      
      // 加载持仓
      const positionsRes = await positionsApi.getPositions(modelName);
      // 后端返回的数据在 items 字段中
      setPositions(positionsRes.data?.items || positionsRes.data || []);
      
      // 生成模拟历史数据（实际应该从API获取）
      const history = generateMockHistory(portfolios.find(p => p.model_name === modelName));
      setPortfolioHistory(history);
    } catch (error) {
      console.error('Error loading model details:', error);
    }
  };

  const generateMockHistory = (portfolio: ModelPortfolio | undefined) => {
    if (!portfolio) return [];
    
    const data = [];
    const baseValue = portfolio.total_value;
    const now = new Date();
    
    for (let i = 30; i >= 0; i--) {
      const date = new Date(now);
      date.setDate(date.getDate() - i);
      const value = baseValue + (Math.random() - 0.5) * 1000;
      data.push({
        date: date.toISOString().split('T')[0],
        value: Math.max(value, baseValue * 0.95),
      });
    }
    
    return data;
  };

  // 手动刷新函数
  const handleRefresh = async () => {
    setIsRefreshing(true);
    try {
      await loadData();
      if (selectedModel === 'all') {
        await loadAllModelsData();
      } else if (selectedModel) {
        await loadModelDetails(selectedModel);
      }
    } catch (error) {
      console.error('Refresh error:', error);
    } finally {
      setIsRefreshing(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-xl text-zinc-600 dark:text-zinc-400">加载中...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-zinc-50 to-zinc-100 dark:from-zinc-900 dark:to-black">
      <div className="container mx-auto px-4 py-8 max-w-[1600px]">
        <div className="mb-6">
          <h1 className="text-4xl font-bold text-zinc-900 dark:text-zinc-50 mb-2">
            🎯 模型对比分析
          </h1>
          <p className="text-zinc-600 dark:text-zinc-400">
            实时跟踪多模型交易表现
          </p>
        </div>

        {/* 主布局：分为上下两部分 */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          {/* 左侧：账户总价值图表 */}
          <div className="lg:col-span-1 bg-white dark:bg-zinc-800 rounded-lg p-6 shadow-sm border border-zinc-200 dark:border-zinc-700">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-semibold text-zinc-900 dark:text-zinc-50">
                账户总价值
              </h2>
              {/* 刷新按钮和时间范围选择器 */}
              <div className="flex gap-2 items-center">
                {/* 手动刷新按钮 */}
                <button
                  onClick={handleRefresh}
                  disabled={isRefreshing}
                  className={`px-3 py-1.5 text-sm font-medium rounded-lg transition-colors ${
                    isRefreshing
                      ? 'bg-zinc-200 dark:bg-zinc-700 text-zinc-500 cursor-not-allowed'
                      : 'bg-blue-600 text-white hover:bg-blue-700'
                  }`}
                  title="手动刷新"
                >
                  {isRefreshing ? '⏳ 刷新中...' : '🔄 刷新'}
                </button>
                
                {/* 自动刷新切换按钮 */}
                <button
                  onClick={() => setAutoRefresh(!autoRefresh)}
                  className={`px-3 py-1.5 text-sm font-medium rounded-lg transition-colors ${
                    autoRefresh
                      ? 'bg-green-600 text-white hover:bg-green-700'
                      : 'bg-zinc-200 dark:bg-zinc-700 text-zinc-700 dark:text-zinc-300 hover:bg-zinc-300 dark:hover:bg-zinc-600'
                  }`}
                  title={autoRefresh ? '自动刷新已开启（每30秒）' : '点击开启自动刷新'}
                >
                  {autoRefresh ? '⏱️ 自动刷新' : '⏸️ 开启自动'}
                </button>
                
                {([
                  { value: '15m', label: '15分钟' },
                  { value: '1h', label: '1小时' },
                  { value: '3h', label: '3小时' },
                  { value: '6h', label: '6小时' },
                  { value: '12h', label: '12小时' },
                  { value: '1d', label: '1天' },
                ] as const).map(({ value, label }) => (
                  <button
                    key={value}
                    onClick={() => setTimeRange(value)}
                    className={`px-3 py-1.5 text-sm font-medium rounded-lg transition-colors ${
                      timeRange === value
                        ? 'bg-blue-600 text-white dark:bg-blue-500'
                        : 'bg-zinc-100 dark:bg-zinc-700 text-zinc-700 dark:text-zinc-300 hover:bg-zinc-200 dark:hover:bg-zinc-600'
                    }`}
                  >
                    {label}
                  </button>
                ))}
              </div>
            </div>
            <div className="h-[500px]">
              <EChartsComponent portfolios={portfolios} historyData={portfolioHistory} timeRange={timeRange} />
            </div>
          </div>

          {/* 右侧：仓位列表 */}
          <div className="bg-white dark:bg-zinc-800 rounded-lg p-6 shadow-sm border border-zinc-200 dark:border-zinc-700">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-semibold text-zinc-900 dark:text-zinc-50">
                持仓详情
              </h2>
              <div className="flex gap-2">
                <select
                  value={selectedModel}
                  onChange={(e) => setSelectedModel(e.target.value)}
                  className="px-3 py-1.5 text-sm bg-white dark:bg-zinc-700 border border-zinc-300 dark:border-zinc-600 rounded-lg text-zinc-900 dark:text-zinc-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">全部模型</option>
                  {portfolios.map((portfolio) => (
                    <option key={portfolio.model_name} value={portfolio.model_name}>
                      {portfolio.model_name}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* Tabs */}
            <div className="mb-4 border-b border-zinc-200 dark:border-zinc-700">
              <div className="flex gap-2">
                {(['positions', 'history', 'chat'] as const).map((tab) => (
                  <button
                    key={tab}
                    onClick={() => setActiveTab(tab)}
                    className={`px-4 py-2 font-medium transition-colors ${
                      activeTab === tab
                        ? 'border-b-2 border-blue-500 text-blue-600 dark:text-blue-400'
                        : 'text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-300'
                    }`}
                  >
                    {tab === 'positions' ? '持仓' : tab === 'history' ? '交易历史' : '对话记录'}
                  </button>
                ))}
              </div>
            </div>

            {/* Tab Content */}
            <div className="h-[600px] overflow-y-auto">
                  {activeTab === 'history' && (
                    <div className="space-y-2">
                      {Array.isArray(decisions) && decisions.length === 0 ? (
                        <div className="text-center py-8 text-zinc-600 dark:text-zinc-400">
                          暂无交易历史
                        </div>
                      ) : (
                        Array.isArray(decisions) && decisions.map((decision) => (
                        <div
                          key={decision.id}
                          className={`p-3 bg-zinc-50 dark:bg-zinc-900 rounded-lg transition-colors ${
                            decision.conversation ? 'cursor-pointer hover:bg-zinc-100 dark:hover:bg-zinc-800' : ''
                          }`}
                          onClick={() => {
                            if (decision.conversation) {
                              setConversationContent({
                                prompt: decision.conversation.prompt || '',
                                response: decision.conversation.response || ''
                              });
                              setConversationModalOpen(true);
                            }
                          }}
                        >
                          <div className="flex justify-between items-start mb-2">
                            <div className="flex items-center gap-2">
                              <span className="font-medium text-zinc-900 dark:text-zinc-50">
                                {decision.symbol || 'N/A'}
                              </span>
                              {selectedModel === 'all' && (
                                <span className="px-2 py-0.5 bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300 rounded text-xs font-medium">
                                  {decision.model_name}
                                </span>
                              )}
                            </div>
                            <span
                              className={`px-2 py-1 rounded text-sm font-medium ${
                                decision.action === 'BUY'
                                  ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                                  : decision.action === 'SELL'
                                  ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
                                  : 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'
                              }`}
                            >
                              {decision.action}
                            </span>
                          </div>
                          {(decision.reasoning || decision.response_raw?.rationale) && (
                            <p className="text-sm text-zinc-600 dark:text-zinc-400">
                              {decision.reasoning || decision.response_raw?.rationale}
                            </p>
                          )}
                          <div className="flex justify-between items-center mt-2">
                            <div className="text-xs text-zinc-500 dark:text-zinc-500">
                              {formatTimestamp(decision.timestamp)}
                            </div>
                            {decision.conversation && (
                              <div className="text-xs text-blue-600 dark:text-blue-400 cursor-pointer">
                                查看对话 →
                              </div>
                            )}
                          </div>
                        </div>
                        ))
                      )}
                    </div>
                  )}

                  {activeTab === 'chat' && (
                    <div className="space-y-2 text-zinc-600 dark:text-zinc-400">
                      {!Array.isArray(decisions) || decisions.length === 0 ? (
                        <div className="text-center py-8 text-zinc-600 dark:text-zinc-400">
                          暂无聊天记录
                        </div>
                      ) : (
                        Array.isArray(decisions) && decisions.slice(0, 10).map((decision, idx) => (
                        <div 
                          key={idx} 
                          className="p-3 bg-zinc-50 dark:bg-zinc-900 rounded-lg cursor-pointer hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors"
                          onClick={() => {
                            setModalContent(decision);
                            setModalOpen(true);
                          }}
                        >
                          <div className="flex items-center justify-between mb-1">
                            <div className="text-xs text-zinc-500">
                              {formatTimestamp(decision.timestamp)}
                            </div>
                            {selectedModel === 'all' && (
                              <span className="px-2 py-0.5 bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300 rounded text-xs font-medium">
                                {decision.model_name}
                              </span>
                            )}
                          </div>
                          <div className="text-sm">
                            <strong>Prompt:</strong> {decision.prompt?.substring(0, 100)}...
                          </div>
                          <div className="text-sm mt-1">
                            <strong>Response:</strong> {decision.response_raw ? JSON.stringify(decision.response_raw).substring(0, 100) : 'N/A'}...
                          </div>
                          <div className="text-xs text-blue-600 dark:text-blue-400 mt-2">
                            点击查看完整内容 →
                          </div>
                        </div>
                        ))
                      )}
                    </div>
                  )}

                  {activeTab === 'positions' && (
                    <div className="space-y-2">
                      {!Array.isArray(positions) || positions.length === 0 ? (
                        <div className="text-center py-8 text-zinc-600 dark:text-zinc-400">
                          暂无持仓
                        </div>
                      ) : (
                        Array.isArray(positions) && positions.map((position) => (
                          <div
                            key={position.id}
                            className="p-4 bg-zinc-50 dark:bg-zinc-900 rounded-lg"
                          >
                            <div className="flex justify-between items-start mb-2">
                              <div className="flex items-center gap-2">
                                <span className="font-medium text-zinc-900 dark:text-zinc-50">
                                  {position.symbol}
                                </span>
                                {selectedModel === 'all' && (
                                  <span className="px-2 py-0.5 bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-300 rounded text-xs font-medium">
                                    {position.model_name}
                                  </span>
                                )}
                              </div>
                              <span className="text-sm text-zinc-600 dark:text-zinc-400">
                                {position.quantity}
                              </span>
                            </div>
                            <div className="grid grid-cols-2 gap-2 text-sm">
                              <div>
                                <span className="text-zinc-600 dark:text-zinc-400">入场价</span>
                                <div className="font-medium">
                                  ${position.entry_price.toFixed(4)}
                                </div>
                              </div>
                              <div>
                                <span className="text-zinc-600 dark:text-zinc-400">当前价</span>
                                <div className="font-medium">
                                  ${position.current_price?.toFixed(4) || '--'}
                                </div>
                              </div>
                            </div>
                            <div className="mt-2 text-sm">
                              <span className="text-zinc-600 dark:text-zinc-400">盈亏</span>
                              <span
                                className={`ml-2 font-medium ${
                                  position.pnl >= 0
                                    ? 'text-green-600 dark:text-green-400'
                                    : 'text-red-600 dark:text-red-400'
                                }`}
                              >
                                ${position.pnl.toFixed(2)} ({position.pnl_percent.toFixed(2)}%)
                              </span>
                            </div>
                          </div>
                        ))
                      )}
                    </div>
                  )}
                </div>
            </div>
          </div>
        </div>

        {/* 底部：模型汇总卡片 */}
        <div className="mt-6 bg-white dark:bg-zinc-800 rounded-lg p-6 shadow-sm border border-zinc-200 dark:border-zinc-700">
          <h2 className="text-xl font-semibold text-zinc-900 dark:text-zinc-50 mb-4">
            模型汇总
          </h2>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-7 gap-4 overflow-x-auto">
            {portfolios.map((portfolio) => (
              <div
                key={portfolio.model_name}
                onClick={() => setSelectedModel(portfolio.model_name)}
                className={`p-4 rounded-lg border-2 transition-colors cursor-pointer ${
                  selectedModel === portfolio.model_name
                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                    : 'border-zinc-200 dark:border-zinc-700 hover:border-zinc-300 dark:hover:border-zinc-600'
                }`}
              >
                <div className="text-sm font-medium text-zinc-700 dark:text-zinc-300 mb-2">
                  {portfolio.model_name}
                </div>
                <div className="text-2xl font-bold text-zinc-900 dark:text-zinc-50">
                  ${portfolio.total_value.toFixed(2)}
                </div>
                <div className="text-xs text-zinc-500 dark:text-zinc-400 mt-1">
                  {portfolio.pnl >= 0 ? '+' : ''}{portfolio.pnl.toFixed(2)} ({portfolio.pnl_percent.toFixed(2)}%)
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>

      {/* Modal */}
      {modalOpen && modalContent && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
          onClick={() => setModalOpen(false)}
        >
          <div 
            className="bg-white dark:bg-zinc-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div className="px-6 py-4 border-b border-zinc-200 dark:border-zinc-700 flex justify-between items-center">
              <h3 className="text-xl font-semibold text-zinc-900 dark:text-zinc-50">
                聊天详情
              </h3>
              <button
                onClick={() => setModalOpen(false)}
                className="text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100"
              >
                ✕
              </button>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-80px)]">
              <div className="space-y-6">
                {/* Timestamp */}
                <div className="text-sm text-zinc-500 dark:text-zinc-500">
                  {formatTimestamp(modalContent.timestamp)}
                </div>

                {/* Prompt */}
                <div>
                  <h4 className="text-sm font-semibold text-zinc-900 dark:text-zinc-50 mb-2">
                    Prompt:
                  </h4>
                  <div className="p-4 bg-zinc-50 dark:bg-zinc-900 rounded-lg">
                    <pre className="whitespace-pre-wrap text-sm text-zinc-700 dark:text-zinc-300">
                      {modalContent.prompt || 'N/A'}
                    </pre>
                  </div>
                </div>

                {/* Response */}
                <div>
                  <h4 className="text-sm font-semibold text-zinc-900 dark:text-zinc-50 mb-2">
                    Response:
                  </h4>
                  <div className="p-4 bg-zinc-50 dark:bg-zinc-900 rounded-lg">
                    {modalContent.response_raw ? (
                      <pre className="whitespace-pre-wrap text-sm text-zinc-700 dark:text-zinc-300 overflow-x-auto">
                        {JSON.stringify(modalContent.response_raw, null, 2)}
                      </pre>
                    ) : (
                      <div className="text-sm text-zinc-600 dark:text-zinc-400">N/A</div>
                    )}
                  </div>
                </div>

                {/* Decision Info */}
                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <div className="text-sm text-zinc-600 dark:text-zinc-400">Symbol</div>
                    <div className="font-medium text-zinc-900 dark:text-zinc-50">
                      {modalContent.symbol || 'N/A'}
                    </div>
                  </div>
                  <div>
                    <div className="text-sm text-zinc-600 dark:text-zinc-400">Action</div>
                    <div className="font-medium text-zinc-900 dark:text-zinc-50">
                      {modalContent.action}
                    </div>
                  </div>
                  <div>
                    <div className="text-sm text-zinc-600 dark:text-zinc-400">Confidence</div>
                    <div className="font-medium text-zinc-900 dark:text-zinc-50">
                      {modalContent.confidence ? `${(modalContent.confidence * 100).toFixed(1)}%` : 'N/A'}
                    </div>
                  </div>
                </div>

                {/* Reasoning */}
                {modalContent.reasoning && (
                  <div>
                    <h4 className="text-sm font-semibold text-zinc-900 dark:text-zinc-50 mb-2">
                      Reasoning:
                    </h4>
                    <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                      <div className="text-sm text-zinc-700 dark:text-zinc-300">
                        {modalContent.reasoning}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Footer */}
            <div className="px-6 py-4 border-t border-zinc-200 dark:border-zinc-700 flex justify-end">
              <button
                onClick={() => setModalOpen(false)}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                关闭
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Conversation Modal */}
      {conversationModalOpen && conversationContent && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
          onClick={() => setConversationModalOpen(false)}
        >
          <div 
            className="bg-white dark:bg-zinc-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div className="px-6 py-4 border-b border-zinc-200 dark:border-zinc-700 flex justify-between items-center">
              <h3 className="text-xl font-semibold text-zinc-900 dark:text-zinc-50">
                对话记录
              </h3>
              <button
                onClick={() => setConversationModalOpen(false)}
                className="text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100"
              >
                ✕
              </button>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-80px)]">
              <div className="space-y-6">
                {/* Prompt */}
                <div>
                  <h4 className="text-sm font-semibold text-zinc-900 dark:text-zinc-50 mb-2">
                    Prompt:
                  </h4>
                  <div className="p-4 bg-zinc-50 dark:bg-zinc-900 rounded-lg">
                    <pre className="whitespace-pre-wrap text-sm text-zinc-700 dark:text-zinc-300">
                      {conversationContent.prompt || 'N/A'}
                    </pre>
                  </div>
                </div>

                {/* Response */}
                <div>
                  <h4 className="text-sm font-semibold text-zinc-900 dark:text-zinc-50 mb-2">
                    Response:
                  </h4>
                  <div className="p-4 bg-zinc-50 dark:bg-zinc-900 rounded-lg">
                    <pre className="whitespace-pre-wrap text-sm text-zinc-700 dark:text-zinc-300 overflow-x-auto">
                      {conversationContent.response || 'N/A'}
                    </pre>
                  </div>
                </div>
              </div>
            </div>

            {/* Footer */}
            <div className="px-6 py-4 border-t border-zinc-200 dark:border-zinc-700 flex justify-end">
              <button
                onClick={() => setConversationModalOpen(false)}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                关闭
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// ECharts 多线图组件
function EChartsComponent({ 
  portfolios, 
  historyData, 
  timeRange 
}: { 
  portfolios: ModelPortfolio[], 
  historyData: any[], 
  timeRange: '15m' | '1h' | '3h' | '6h' | '12h' | '1d' 
}) {
  const chartRef = useRef<HTMLDivElement>(null);
  const chartInstanceRef = useRef<any>(null);
  const echartsRef = useRef<any>(null);

  // 处理数据
  const processedData = React.useMemo(() => {
    if (!historyData || historyData.length === 0) {
      return {
        xAxisData: [],
        series: portfolios.map(() => ({ data: [] }))
      };
    }

    console.log('📊 ECharts 数据准备:', {
      historyDataLength: historyData.length,
      portfolios: portfolios.map(p => p.model_name)
    });

    // X轴数据（时间）
    const xAxisData = historyData.map((item: any) => item.timestamp);
    
    // 每个模型的数据
    const series = portfolios.map((portfolio) => ({
      name: portfolio.model_name,
      type: 'line',
      data: historyData.map((item: any) => {
        const value = item[portfolio.model_name];
        return value !== null && value !== undefined ? value : null;
      }),
      smooth: false,
      symbol: 'none',
      symbolSize: 0,
      lineStyle: {
        width: 2,
        type: 'solid'
      },
      areaStyle: {
        opacity: 0.05
      },
      emphasis: {
        focus: 'series'
      }
    }));

    return { xAxisData, series };
  }, [historyData, portfolios]);

  // 渲染图表
  useEffect(() => {
    if (!chartRef.current) return;

    // 动态导入 ECharts
    const initChart = async () => {
      if (!echartsRef.current) {
        try {
          const echartsModule = await import('echarts');
          echartsRef.current = echartsModule.default || echartsModule;
          console.log('ECharts loaded:', echartsRef.current);
        } catch (error) {
          console.error('Failed to load ECharts:', error);
          return;
        }
      }

      if (!chartInstanceRef.current && chartRef.current && echartsRef.current) {
        try {
          chartInstanceRef.current = echartsRef.current.init(chartRef.current);
          console.log('Chart initialized:', chartInstanceRef.current);
        } catch (error) {
          console.error('Failed to initialize chart:', error);
          return;
        }
      }

      if (!chartInstanceRef.current) return;
      const chart = chartInstanceRef.current;

      // 格式化时间轴标签
      const formatTimeLabel = (value: string) => {
        const date = new Date(value);
        
        if (['15m', '1h', '3h'].includes(timeRange)) {
          const hours = String(date.getHours()).padStart(2, '0');
          const minutes = String(date.getMinutes()).padStart(2, '0');
          return `${hours}:${minutes}`;
        }
        
        const month = String(date.getMonth() + 1);
        const day = String(date.getDate());
        const hours = String(date.getHours());
        return `${month}/${day} ${hours}时`;
      };

      // 设置配置
      const option: any = {
      tooltip: {
        trigger: 'axis',
        axisPointer: {
          type: 'cross',
          label: {
            backgroundColor: '#6a7985'
          }
        },
        formatter: (params: any) => {
          if (!Array.isArray(params)) return '';
          let result = formatTimestamp(params[0].axisValue) + '<br/>';
          params.forEach((param: any) => {
            if (param.value !== null && param.value !== undefined) {
              result += `${param.marker} ${param.seriesName}: $${Number(param.value).toFixed(2)}<br/>`;
            }
          });
          return result;
        }
      },
      legend: {
        data: portfolios.map(p => p.model_name),
        top: 10,
        textStyle: {
          color: '#6b7280'
        }
      },
      grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        top: '15%',
        containLabel: true
      },
      xAxis: {
        type: 'category',
        boundaryGap: false,
        data: processedData.xAxisData,
        axisLabel: {
          formatter: formatTimeLabel,
          color: '#6b7280'
        },
        axisLine: {
          lineStyle: {
            color: '#e5e7eb'
          }
        },
        splitLine: {
          show: false
        }
      },
      yAxis: {
        type: 'value',
        min: 10000,
        axisLabel: {
          formatter: (value: number) => {
            const diff = value - 10000;
            if (diff === 0) return '$10k';
            return diff > 0 ? `+$${diff.toFixed(0)}` : `-$${Math.abs(diff).toFixed(0)}`;
          },
          color: '#6b7280'
        },
        axisLine: {
          lineStyle: {
            color: '#e5e7eb'
          }
        },
        splitLine: {
          show: true,
          lineStyle: {
            color: '#e5e7eb',
            type: 'dashed'
          }
        },
        splitArea: {
          show: true,
          areaStyle: {
            color: ['rgba(250, 250, 250, 0.05)', 'rgba(200, 200, 200, 0.02)']
          }
        }
      },
      dataZoom: [
        {
          type: 'inside',
          start: 0,
          end: 100
        },
        {
          show: true,
          type: 'slider',
          height: 20,
          bottom: 10
        }
      ],
      series: processedData.series.map((s, idx) => ({
        ...s,
        itemStyle: {
          color: ['#3b82f6', '#10b981', '#f59e0b'][idx % 3]
        },
        lineStyle: {
          color: ['#3b82f6', '#10b981', '#f59e0b'][idx % 3],
          width: 2
        }
      }))
    };

      // 设置配置
      chart.setOption(option, true);

      // 响应式调整
      const handleResize = () => {
        chart.resize();
      };
      window.addEventListener('resize', handleResize);

      return () => {
        window.removeEventListener('resize', handleResize);
      };
    };

    initChart().catch(console.error);
  }, [processedData, timeRange, portfolios]);

  // 清理
  useEffect(() => {
    return () => {
      if (chartInstanceRef.current) {
        chartInstanceRef.current.dispose();
        chartInstanceRef.current = null;
      }
    };
  }, []);

  return (
    <div 
      ref={chartRef} 
      style={{ width: '100%', height: '100%' }}
    />
  );
}

}
